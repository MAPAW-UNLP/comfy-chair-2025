/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ConferenciasAltaConferenciaRouteImport } from './routes/conferencias/alta-conferencia'
import { Route as ConferenciasIdRouteImport } from './routes/conferencias/$id'
import { Route as ArticleViewRouteImport } from './routes/article/view'
import { Route as ArticleCreateRouteImport } from './routes/article/create'
import { Route as ConferenciasEditarIdRouteImport } from './routes/conferencias/editar/$id'

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenciasAltaConferenciaRoute =
  ConferenciasAltaConferenciaRouteImport.update({
    id: '/conferencias/alta-conferencia',
    path: '/conferencias/alta-conferencia',
    getParentRoute: () => rootRouteImport,
  } as any)
const ConferenciasIdRoute = ConferenciasIdRouteImport.update({
  id: '/conferencias/$id',
  path: '/conferencias/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleViewRoute = ArticleViewRouteImport.update({
  id: '/article/view',
  path: '/article/view',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleCreateRoute = ArticleCreateRouteImport.update({
  id: '/article/create',
  path: '/article/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenciasEditarIdRoute = ConferenciasEditarIdRouteImport.update({
  id: '/conferencias/editar/$id',
  path: '/conferencias/editar/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/view': typeof ArticleViewRoute
  '/conferencias/$id': typeof ConferenciasIdRoute
  '/conferencias/alta-conferencia': typeof ConferenciasAltaConferenciaRoute
  '/conferencias/editar/$id': typeof ConferenciasEditarIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/view': typeof ArticleViewRoute
  '/conferencias/$id': typeof ConferenciasIdRoute
  '/conferencias/alta-conferencia': typeof ConferenciasAltaConferenciaRoute
  '/conferencias/editar/$id': typeof ConferenciasEditarIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/view': typeof ArticleViewRoute
  '/conferencias/$id': typeof ConferenciasIdRoute
  '/conferencias/alta-conferencia': typeof ConferenciasAltaConferenciaRoute
  '/conferencias/editar/$id': typeof ConferenciasEditarIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/article/create'
    | '/article/view'
    | '/conferencias/$id'
    | '/conferencias/alta-conferencia'
    | '/conferencias/editar/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/article/create'
    | '/article/view'
    | '/conferencias/$id'
    | '/conferencias/alta-conferencia'
    | '/conferencias/editar/$id'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/article/create'
    | '/article/view'
    | '/conferencias/$id'
    | '/conferencias/alta-conferencia'
    | '/conferencias/editar/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  ArticleCreateRoute: typeof ArticleCreateRoute
  ArticleViewRoute: typeof ArticleViewRoute
  ConferenciasIdRoute: typeof ConferenciasIdRoute
  ConferenciasAltaConferenciaRoute: typeof ConferenciasAltaConferenciaRoute
  ConferenciasEditarIdRoute: typeof ConferenciasEditarIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conferencias/alta-conferencia': {
      id: '/conferencias/alta-conferencia'
      path: '/conferencias/alta-conferencia'
      fullPath: '/conferencias/alta-conferencia'
      preLoaderRoute: typeof ConferenciasAltaConferenciaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conferencias/$id': {
      id: '/conferencias/$id'
      path: '/conferencias/$id'
      fullPath: '/conferencias/$id'
      preLoaderRoute: typeof ConferenciasIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/view': {
      id: '/article/view'
      path: '/article/view'
      fullPath: '/article/view'
      preLoaderRoute: typeof ArticleViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/create': {
      id: '/article/create'
      path: '/article/create'
      fullPath: '/article/create'
      preLoaderRoute: typeof ArticleCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conferencias/editar/$id': {
      id: '/conferencias/editar/$id'
      path: '/conferencias/editar/$id'
      fullPath: '/conferencias/editar/$id'
      preLoaderRoute: typeof ConferenciasEditarIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  ArticleCreateRoute: ArticleCreateRoute,
  ArticleViewRoute: ArticleViewRoute,
  ConferenciasIdRoute: ConferenciasIdRoute,
  ConferenciasAltaConferenciaRoute: ConferenciasAltaConferenciaRoute,
  ConferenciasEditarIdRoute: ConferenciasEditarIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
