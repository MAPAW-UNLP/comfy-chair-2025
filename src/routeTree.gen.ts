/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ConferenciasViewRouteImport } from './routes/conferencias/view'
import { Route as ConferenciasCreateRouteImport } from './routes/conferencias/create'
import { Route as ConferenciasIdRouteImport } from './routes/conferencias/$id'
import { Route as ArticleViewRouteImport } from './routes/article/view'
import { Route as ArticleCreateRouteImport } from './routes/article/create'
import { Route as ConferenciasEditIdRouteImport } from './routes/conferencias/edit/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenciasViewRoute = ConferenciasViewRouteImport.update({
  id: '/conferencias/view',
  path: '/conferencias/view',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenciasCreateRoute = ConferenciasCreateRouteImport.update({
  id: '/conferencias/create',
  path: '/conferencias/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenciasIdRoute = ConferenciasIdRouteImport.update({
  id: '/conferencias/$id',
  path: '/conferencias/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleViewRoute = ArticleViewRouteImport.update({
  id: '/article/view',
  path: '/article/view',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleCreateRoute = ArticleCreateRouteImport.update({
  id: '/article/create',
  path: '/article/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenciasEditIdRoute = ConferenciasEditIdRouteImport.update({
  id: '/conferencias/edit/$id',
  path: '/conferencias/edit/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/view': typeof ArticleViewRoute
  '/conferencias/$id': typeof ConferenciasIdRoute
  '/conferencias/create': typeof ConferenciasCreateRoute
  '/conferencias/view': typeof ConferenciasViewRoute
  '/conferencias/edit/$id': typeof ConferenciasEditIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/view': typeof ArticleViewRoute
  '/conferencias/$id': typeof ConferenciasIdRoute
  '/conferencias/create': typeof ConferenciasCreateRoute
  '/conferencias/view': typeof ConferenciasViewRoute
  '/conferencias/edit/$id': typeof ConferenciasEditIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/view': typeof ArticleViewRoute
  '/conferencias/$id': typeof ConferenciasIdRoute
  '/conferencias/create': typeof ConferenciasCreateRoute
  '/conferencias/view': typeof ConferenciasViewRoute
  '/conferencias/edit/$id': typeof ConferenciasEditIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/article/create'
    | '/article/view'
    | '/conferencias/$id'
    | '/conferencias/create'
    | '/conferencias/view'
    | '/conferencias/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/article/create'
    | '/article/view'
    | '/conferencias/$id'
    | '/conferencias/create'
    | '/conferencias/view'
    | '/conferencias/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/article/create'
    | '/article/view'
    | '/conferencias/$id'
    | '/conferencias/create'
    | '/conferencias/view'
    | '/conferencias/edit/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArticleCreateRoute: typeof ArticleCreateRoute
  ArticleViewRoute: typeof ArticleViewRoute
  ConferenciasIdRoute: typeof ConferenciasIdRoute
  ConferenciasCreateRoute: typeof ConferenciasCreateRoute
  ConferenciasViewRoute: typeof ConferenciasViewRoute
  ConferenciasEditIdRoute: typeof ConferenciasEditIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conferencias/view': {
      id: '/conferencias/view'
      path: '/conferencias/view'
      fullPath: '/conferencias/view'
      preLoaderRoute: typeof ConferenciasViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conferencias/create': {
      id: '/conferencias/create'
      path: '/conferencias/create'
      fullPath: '/conferencias/create'
      preLoaderRoute: typeof ConferenciasCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conferencias/$id': {
      id: '/conferencias/$id'
      path: '/conferencias/$id'
      fullPath: '/conferencias/$id'
      preLoaderRoute: typeof ConferenciasIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/view': {
      id: '/article/view'
      path: '/article/view'
      fullPath: '/article/view'
      preLoaderRoute: typeof ArticleViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/create': {
      id: '/article/create'
      path: '/article/create'
      fullPath: '/article/create'
      preLoaderRoute: typeof ArticleCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conferencias/edit/$id': {
      id: '/conferencias/edit/$id'
      path: '/conferencias/edit/$id'
      fullPath: '/conferencias/edit/$id'
      preLoaderRoute: typeof ConferenciasEditIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArticleCreateRoute: ArticleCreateRoute,
  ArticleViewRoute: ArticleViewRoute,
  ConferenciasIdRoute: ConferenciasIdRoute,
  ConferenciasCreateRoute: ConferenciasCreateRoute,
  ConferenciasViewRoute: ConferenciasViewRoute,
  ConferenciasEditIdRoute: ConferenciasEditIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
