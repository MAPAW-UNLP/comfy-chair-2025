/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ReviewerBiddingRouteImport } from './routes/reviewer/bidding'
import { Route as ConferenceViewRouteImport } from './routes/conference/view'
import { Route as ConferenceCreateRouteImport } from './routes/conference/create'
import { Route as ConferenceIdRouteImport } from './routes/conference/$id'
import { Route as ChairsSelectionRouteImport } from './routes/chairs/selection'
import { Route as ArticleViewRouteImport } from './routes/article/view'
import { Route as ArticleSelectRouteImport } from './routes/article/select'
import { Route as ArticleCreateRouteImport } from './routes/article/create'
import { Route as AuthDashboardRouteImport } from './routes/_auth.dashboard'
import { Route as ConferenceEditIdRouteImport } from './routes/conference/edit/$id'
import { Route as ArticleAssignIdRouteImport } from './routes/article/assign/$id'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReviewerBiddingRoute = ReviewerBiddingRouteImport.update({
  id: '/reviewer/bidding',
  path: '/reviewer/bidding',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenceViewRoute = ConferenceViewRouteImport.update({
  id: '/conference/view',
  path: '/conference/view',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenceCreateRoute = ConferenceCreateRouteImport.update({
  id: '/conference/create',
  path: '/conference/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ConferenceIdRoute = ConferenceIdRouteImport.update({
  id: '/conference/$id',
  path: '/conference/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ChairsSelectionRoute = ChairsSelectionRouteImport.update({
  id: '/chairs/selection',
  path: '/chairs/selection',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleViewRoute = ArticleViewRouteImport.update({
  id: '/article/view',
  path: '/article/view',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleSelectRoute = ArticleSelectRouteImport.update({
  id: '/article/select',
  path: '/article/select',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleCreateRoute = ArticleCreateRouteImport.update({
  id: '/article/create',
  path: '/article/create',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const ConferenceEditIdRoute = ConferenceEditIdRouteImport.update({
  id: '/conference/edit/$id',
  path: '/conference/edit/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticleAssignIdRoute = ArticleAssignIdRouteImport.update({
  id: '/article/assign/$id',
  path: '/article/assign/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/dashboard': typeof AuthDashboardRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/select': typeof ArticleSelectRoute
  '/article/view': typeof ArticleViewRoute
  '/chairs/selection': typeof ChairsSelectionRoute
  '/conference/$id': typeof ConferenceIdRoute
  '/conference/create': typeof ConferenceCreateRoute
  '/conference/view': typeof ConferenceViewRoute
  '/reviewer/bidding': typeof ReviewerBiddingRoute
  '/article/assign/$id': typeof ArticleAssignIdRoute
  '/conference/edit/$id': typeof ConferenceEditIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/dashboard': typeof AuthDashboardRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/select': typeof ArticleSelectRoute
  '/article/view': typeof ArticleViewRoute
  '/chairs/selection': typeof ChairsSelectionRoute
  '/conference/$id': typeof ConferenceIdRoute
  '/conference/create': typeof ConferenceCreateRoute
  '/conference/view': typeof ConferenceViewRoute
  '/reviewer/bidding': typeof ReviewerBiddingRoute
  '/article/assign/$id': typeof ArticleAssignIdRoute
  '/conference/edit/$id': typeof ConferenceEditIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/article/create': typeof ArticleCreateRoute
  '/article/select': typeof ArticleSelectRoute
  '/article/view': typeof ArticleViewRoute
  '/chairs/selection': typeof ChairsSelectionRoute
  '/conference/$id': typeof ConferenceIdRoute
  '/conference/create': typeof ConferenceCreateRoute
  '/conference/view': typeof ConferenceViewRoute
  '/reviewer/bidding': typeof ReviewerBiddingRoute
  '/article/assign/$id': typeof ArticleAssignIdRoute
  '/conference/edit/$id': typeof ConferenceEditIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/article/create'
    | '/article/select'
    | '/article/view'
    | '/chairs/selection'
    | '/conference/$id'
    | '/conference/create'
    | '/conference/view'
    | '/reviewer/bidding'
    | '/article/assign/$id'
    | '/conference/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/article/create'
    | '/article/select'
    | '/article/view'
    | '/chairs/selection'
    | '/conference/$id'
    | '/conference/create'
    | '/conference/view'
    | '/reviewer/bidding'
    | '/article/assign/$id'
    | '/conference/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/dashboard'
    | '/article/create'
    | '/article/select'
    | '/article/view'
    | '/chairs/selection'
    | '/conference/$id'
    | '/conference/create'
    | '/conference/view'
    | '/reviewer/bidding'
    | '/article/assign/$id'
    | '/conference/edit/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ArticleCreateRoute: typeof ArticleCreateRoute
  ArticleSelectRoute: typeof ArticleSelectRoute
  ArticleViewRoute: typeof ArticleViewRoute
  ChairsSelectionRoute: typeof ChairsSelectionRoute
  ConferenceIdRoute: typeof ConferenceIdRoute
  ConferenceCreateRoute: typeof ConferenceCreateRoute
  ConferenceViewRoute: typeof ConferenceViewRoute
  ReviewerBiddingRoute: typeof ReviewerBiddingRoute
  ArticleAssignIdRoute: typeof ArticleAssignIdRoute
  ConferenceEditIdRoute: typeof ConferenceEditIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reviewer/bidding': {
      id: '/reviewer/bidding'
      path: '/reviewer/bidding'
      fullPath: '/reviewer/bidding'
      preLoaderRoute: typeof ReviewerBiddingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conference/view': {
      id: '/conference/view'
      path: '/conference/view'
      fullPath: '/conference/view'
      preLoaderRoute: typeof ConferenceViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conference/create': {
      id: '/conference/create'
      path: '/conference/create'
      fullPath: '/conference/create'
      preLoaderRoute: typeof ConferenceCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conference/$id': {
      id: '/conference/$id'
      path: '/conference/$id'
      fullPath: '/conference/$id'
      preLoaderRoute: typeof ConferenceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chairs/selection': {
      id: '/chairs/selection'
      path: '/chairs/selection'
      fullPath: '/chairs/selection'
      preLoaderRoute: typeof ChairsSelectionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/view': {
      id: '/article/view'
      path: '/article/view'
      fullPath: '/article/view'
      preLoaderRoute: typeof ArticleViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/select': {
      id: '/article/select'
      path: '/article/select'
      fullPath: '/article/select'
      preLoaderRoute: typeof ArticleSelectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/create': {
      id: '/article/create'
      path: '/article/create'
      fullPath: '/article/create'
      preLoaderRoute: typeof ArticleCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/conference/edit/$id': {
      id: '/conference/edit/$id'
      path: '/conference/edit/$id'
      fullPath: '/conference/edit/$id'
      preLoaderRoute: typeof ConferenceEditIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/article/assign/$id': {
      id: '/article/assign/$id'
      path: '/article/assign/$id'
      fullPath: '/article/assign/$id'
      preLoaderRoute: typeof ArticleAssignIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ArticleCreateRoute: ArticleCreateRoute,
  ArticleSelectRoute: ArticleSelectRoute,
  ArticleViewRoute: ArticleViewRoute,
  ChairsSelectionRoute: ChairsSelectionRoute,
  ConferenceIdRoute: ConferenceIdRoute,
  ConferenceCreateRoute: ConferenceCreateRoute,
  ConferenceViewRoute: ConferenceViewRoute,
  ReviewerBiddingRoute: ReviewerBiddingRoute,
  ArticleAssignIdRoute: ArticleAssignIdRoute,
  ConferenceEditIdRoute: ConferenceEditIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
